{"version":3,"sources":["webpack:///./rijkshuisstijl/js/components/filter/filter.js"],"names":["Filter","node","this","input","BEM","getChildBEMNode","BLOCK_FILTER","ELEMENT_INPUT","bindEvents","applyFilter","addEventListener","filter","bind","value","discardFilter","setTimeout","selection","document","querySelectorAll","dataset","filterTarget","query","toUpperCase","forEach","addModifier","MODIFIER_MATCH","removeModifier","MODIFIER_NO_MATCH","style","removeProperty","textContent","match","display","FILTERS"],"mappings":"8nBAUMA,E,WAKF,WAAYC,I,4FAAO,CAAD,QAEdC,KAAKD,KAAOA,EAGZC,KAAKC,MAAQC,IAAIC,gBAAgBH,KAAKD,KAAMK,IAAcC,KAE1DL,KAAKM,aACLN,KAAKO,c,4DAOLP,KAAKD,KAAKS,iBAAiB,QAASR,KAAKS,OAAOC,KAAKV,S,+BAOjDA,KAAKC,MAAMU,MACXX,KAAKO,cAELP,KAAKY,kB,oCAOE,IAAD,OACVC,WAAW,WACP,IAAIC,EAAYC,SAASC,iBAAiB,EAAKjB,KAAKkB,QAAQC,cACxDC,EAAQ,EAAKlB,MAAMU,MAAMS,cAE7B,EAAIN,GAAWO,QAAQ,SAAAtB,GACnBG,IAAIoB,YAAYvB,EAAMwB,KACtBrB,IAAIsB,eAAezB,EAAM0B,KACzB1B,EAAK2B,MAAMC,eAAe,WAErB5B,EAAK6B,YAAYR,cAAcS,MAAMV,KACtCjB,IAAIsB,eAAezB,EAAMwB,KACzBrB,IAAIoB,YAAYvB,EAAM0B,KACtB1B,EAAK2B,MAAMI,QAAU,c,sCAWjC,EADgBf,SAASC,iBAAiBhB,KAAKD,KAAKkB,QAAQC,eAC7CG,QAAQ,SAAAtB,GACnBA,EAAK2B,MAAMC,eAAe,WAC1BzB,IAAIoB,YAAYvB,EAAMwB,Y,gCAOlC,EAAIQ,KAASV,QAAQ,SAAAZ,GAAM,OAAI,IAAIX,EAAOW","file":"filter.bundle.js","sourcesContent":["import BEM from 'bem.js';\nimport {BLOCK_FILTER, ELEMENT_INPUT, FILTERS, MODIFIER_MATCH, MODIFIER_NO_MATCH} from './constants';\n\n\n/**\n * Class for generic filters.\n * Filter should have MODIFIER_FILTER present in classList for detection.\n * Filter should have data-filter-target set to query selector for targets.\n * @class\n */\nclass Filter {\n    /**\n     * Constructor method.\n     * @param {HTMLElement} node\n     */\n    constructor(node) {\n        /** @type {HTMLElement} */\n        this.node = node;\n\n        /** @type {HTMLInputElement} */\n        this.input = BEM.getChildBEMNode(this.node, BLOCK_FILTER, ELEMENT_INPUT);\n\n        this.bindEvents();\n        this.applyFilter();\n    }\n\n    /**\n     * Binds events to callbacks.\n     */\n    bindEvents() {\n        this.node.addEventListener('input', this.filter.bind(this));\n    }\n\n    /**\n     * Applies/discard the filter based on this.input.value.\n     */\n    filter() {\n        if (this.input.value) {\n            this.applyFilter();\n        } else {\n            this.discardFilter();\n        }\n    }\n\n    /**\n     * Hides all the nodes matching query selector set in data-filter-target that don't match this.input.value.\n     */\n    applyFilter() {\n        setTimeout(() => {\n            let selection = document.querySelectorAll(this.node.dataset.filterTarget);\n            let query = this.input.value.toUpperCase();\n\n            [...selection].forEach(node => {\n                BEM.addModifier(node, MODIFIER_MATCH);\n                BEM.removeModifier(node, MODIFIER_NO_MATCH);\n                node.style.removeProperty('display');\n\n                if (!node.textContent.toUpperCase().match(query)) {\n                    BEM.removeModifier(node, MODIFIER_MATCH);\n                    BEM.addModifier(node, MODIFIER_NO_MATCH);\n                    node.style.display = 'none';\n                }\n            });\n        });\n    }\n\n    /**\n     * Removes display property from inline style of every node matching query selector set in data-filter-target.\n     */\n    discardFilter() {\n        let selection = document.querySelectorAll(this.node.dataset.filterTarget);\n        [...selection].forEach(node => {\n            node.style.removeProperty('display');\n            BEM.addModifier(node, MODIFIER_MATCH);\n        });\n    }\n}\n\n\n// Start!\n[...FILTERS].forEach(filter => new Filter(filter));\n"],"sourceRoot":""}