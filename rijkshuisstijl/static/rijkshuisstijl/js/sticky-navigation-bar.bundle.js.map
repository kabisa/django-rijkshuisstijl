{"version":3,"sources":["webpack:///./node_modules/debounce/index.js","webpack:///./rijkshuisstijl/js/components/navigation-bar/sticky-navigation-bar.js"],"names":["StickyNavigationBar","node","bindEvents","window","addEventListener","debounce","update","bind","threshold","style","top","exp","getClientRects","BEM","toggleModifier","MODIFIER_STUCK","STICKY_NAVIGATION_BARS","forEach"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;mnCC/DA;;;MAIMA,oB,yBACF;;;OAIA,6BAAYC,IAAZ,CAAkB,2CACd,0BACA,KAAKA,IAAL,CAAYA,IAAZ,CAEA,KAAKC,UAAL,GACH,CAED;;sFAGa,CACTC,MAAM,CAACC,gBAAP,CAAwB,QAAxB,CAAkCC,qCAAQ,CAAC,KAAKC,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAD,CAA1C,EACH,C,uCAEQ,CACL,GAAMC,UAAS,CAAG,KAAKP,IAAL,CAAUQ,KAAV,CAAgBC,GAAhB,EAAuB,CAAzC,CACA,GAAMC,IAAG,CAAG,KAAKV,IAAL,CAAUW,cAAV,GAA2B,CAA3B,EAA8BF,GAA9B,EAAqCF,SAAjD,CACAK,6CAAG,CAACC,cAAJ,CAAmB,KAAKb,IAAxB,CAA8Bc,yDAA9B,CAA8CJ,GAA9C,EACH,C,mCAGL;AACA,mBAAIK,iEAAJ,EAA4BC,OAA5B,CAAoC,SAAAhB,IAAI,QAAI,IAAID,oBAAJ,CAAwBC,IAAxB,CAAJ,EAAxC,E","file":"sticky-navigation-bar.bundle.js","sourcesContent":["/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing. The function also has a property 'clear' \n * that is a function which will clear the timer to prevent previously scheduled executions. \n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */\nfunction debounce(func, wait, immediate){\n  var timeout, args, context, timestamp, result;\n  if (null == wait) wait = 100;\n\n  function later() {\n    var last = Date.now() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    }\n  };\n\n  var debounced = function(){\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n\n  debounced.clear = function() {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n  \n  debounced.flush = function() {\n    if (timeout) {\n      result = func.apply(context, args);\n      context = args = null;\n      \n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n\n  return debounced;\n};\n\n// Adds compatibility for ES modules\ndebounce.debounce = debounce;\n\nmodule.exports = debounce;\n","import BEM from 'bem.js';\n\nimport {MODIFIER_STUCK, STICKY_NAVIGATION_BARS} from './constants';\nimport * as debounce from 'debounce';\n\n\n/**\n * Keeps track of sticky state.\n * @class\n */\nclass StickyNavigationBar {\n    /**\n     * Constructor method.\n     * @param {HTMLElement} node\n     */\n    constructor(node) {\n        /** @type {HTMLElement} */\n        this.node = node;\n\n        this.bindEvents();\n    }\n\n    /**\n     * Binds events to callbacks.\n     */\n    bindEvents() {\n        window.addEventListener('scroll', debounce(this.update.bind(this)));\n    }\n\n    update() {\n        const threshold = this.node.style.top || 0;\n        const exp = this.node.getClientRects()[0].top <= threshold;\n        BEM.toggleModifier(this.node, MODIFIER_STUCK, exp);\n    }\n}\n\n// Start!\n[...STICKY_NAVIGATION_BARS].forEach(node => new StickyNavigationBar(node));\n"],"sourceRoot":""}