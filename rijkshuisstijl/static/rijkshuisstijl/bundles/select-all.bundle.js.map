{"version":3,"sources":["webpack:///./rijkshuisstijl/js/components/toggle/select-all.js"],"names":["SelectAll","node","bindEvents","addEventListener","onClick","bind","e","stopPropagation","preventDefault","setTimeout","toggle","exp","getState","getTargets","forEach","target","event","document","createEvent","initEvent","dispatchEvent","checked","targets","selector","dataset","selectAll","split","filter","length","querySelectorAll","SELECT_ALLS"],"mappings":";;;;;;;;;;;;;+pDAGA;;;;;GAMO,GAAMA,UAAb,yBACI;;;OAIA,mBAAYC,IAAZ,CAAkB,iCACd,+BACA,KAAKA,IAAL,CAAYA,IAAZ,CAEA,KAAKC,UAAL,GACH,CAED;;OAZJ,qEAeiB,CACT,KAAKD,IAAL,CAAUE,gBAAV,CAA2B,OAA3B,CAAoC,KAAKC,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAApC,EACH,CAED;;;OAnBJ,wCAuBYC,CAvBZ,CAuBe,CACPA,CAAC,CAACC,eAAF,GACAD,CAAC,CAACE,cAAF,GACAC,UAAU,CAAC,KAAKC,MAAL,CAAYL,IAAZ,CAAiB,IAAjB,CAAD,CAAV,CACH,CAED;;;OA7BJ,uCAiCmC,IAAxBM,IAAwB,2DAAlB,CAAC,KAAKC,QAAL,EAAiB,CAC3B,KAAKC,UAAL,GACKC,OADL,CACa,SAAAC,MAAM,CAAI,CACf,GAAIC,MAAK,CAAGC,QAAQ,CAACC,WAAT,CAAqB,OAArB,CAAZ,CACAF,KAAK,CAACG,SAAN,CAAgB,QAAhB,CAA0B,IAA1B,CAAgC,IAAhC,EACAV,UAAU,CAAC,iBAAMM,OAAM,CAACK,aAAP,CAAqBJ,KAArB,CAAN,EAAD,CAAV,CACAD,MAAM,CAACM,OAAP,CAAiBV,GAAjB,CACH,CANL,EAOA,KAAKV,IAAL,CAAUoB,OAAV,CAAoBV,GAApB,CACH,CAED;;;OA5CJ,2CAgDe,CACP,MAAO,MAAKV,IAAL,CAAUoB,OAAjB,CACH,CAED;;;OApDJ,+CAwDiB,CACT,GAAIC,QAAO,CAAG,EAAd,CACA,GAAIC,SAAQ,CAAG,KAAKtB,IAAL,CAAUuB,OAAV,CAAkBC,SAAjC,CACAF,QAAQ,CAACG,KAAT,CAAe,GAAf,EACKC,MADL,CACY,SAAAJ,QAAQ,QAAIA,SAAQ,CAACK,MAAb,EADpB,EAEKd,OAFL,CAEa,SAAAS,QAAQ,QAAID,QAAO,8BAAOA,OAAP,qBAAmBL,QAAQ,CAACY,gBAAT,CAA0BN,QAA1B,CAAnB,EAAX,EAFrB,EAGA,MAAOD,QAAP,CACH,CA/DL,yBAkEA;AACA,mBAAIQ,sDAAJ,EAAiBhB,OAAjB,CAAyB,SAAAb,IAAI,QAAI,IAAID,UAAJ,CAAcC,IAAd,CAAJ,EAA7B,E","file":"select-all.bundle.js","sourcesContent":["import {SELECT_ALLS} from './constants';\n\n\n/**\n * Class for generic select all checkboxes.\n * Toggle should have BLOCK_SELECT_ALL present in classList for detection.\n * Toggle should have data-select-all set to queryselector for target(s).\n * @class\n */\nexport class SelectAll {\n    /**\n     * Constructor method.\n     * @param {HTMLInputElement} node\n     */\n    constructor(node) {\n        /** @type {HTMLInputElement} */\n        this.node = node;\n\n        this.bindEvents();\n    }\n\n    /**\n     * Binds events to callbacks.\n     */\n    bindEvents() {\n        this.node.addEventListener('click', this.onClick.bind(this));\n    }\n\n    /**\n     * Callback for this.node click.\n     * @param {Event} e\n     */\n    onClick(e) {\n        e.stopPropagation();\n        e.preventDefault();\n        setTimeout(this.toggle.bind(this));\n    }\n\n    /**\n     * Performs toggle.\n     * @param {boolean} [exp] If passed, add/removes this.toggleModifier based on exp.\n     */\n    toggle(exp = !this.getState()) {\n        this.getTargets()\n            .forEach(target => {\n                let event = document.createEvent('Event');\n                event.initEvent('change', true, true);\n                setTimeout(() => target.dispatchEvent(event));\n                target.checked = exp;\n            });\n        this.node.checked = exp;\n    }\n\n    /**\n     * Returns the checkbox state.\n     * @returns {boolean} Boolean\n     */\n    getState() {\n        return this.node.checked;\n    }\n\n    /**\n     * Returns all the targets for this.node.\n     * @returns {*}\n     */\n    getTargets() {\n        let targets = [];\n        let selector = this.node.dataset.selectAll;\n        selector.split(',')\n            .filter(selector => selector.length)\n            .forEach(selector => targets = [...targets, ...document.querySelectorAll(selector)]);\n        return targets;\n    }\n}\n\n// Start!\n[...SELECT_ALLS].forEach(node => new SelectAll(node));\n"],"sourceRoot":""}