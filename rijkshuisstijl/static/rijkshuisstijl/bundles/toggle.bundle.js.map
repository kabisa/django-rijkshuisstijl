{"version":3,"sources":["webpack:///./rijkshuisstijl/js/components/toggle/toggle.js"],"names":["Toggle","node","this","toggleModifier","dataset","toggleMobileState","toUpperCase","undefined","restoreState","bindEvents","addEventListener","onClick","bind","e","toggleLinkMode","target","getAttribute","preventDefault","stopPropagation","href","getState","setTimeout","toggle","saveState","focus","querySelector","focusTarget","document","exp","toggleOperation","targets","getTargets","forEach","BEM","dispatchEvent","getExclusive","filter","exclusive","indexOf","removeModifier","event","createEvent","initEvent","referenceTarget","Boolean","hasModifier","selector","toggleTarget","getRelated","toggleExclusive","split","length","querySelectorAll","id","value","key","localStorage","setItem","console","warn","matchMedia","matches","getItem","TOGGLES"],"mappings":"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","file":"toggle.bundle.js","sourcesContent":["import BEM from 'bem.js';\nimport {TOGGLES} from './constants';\n\n\n/**\n * Class for generic toggles.\n *\n * Toggle should have BLOCK_TOGGLE present in classList for detection.\n * Toggle should have data-toggle-target set to query selector for target.\n * Toggle should have data-toggle-modifier set to modifier to toggle.\n * Toggle could have data-focus-target set to query selector for node to focus on click.\n * Toggle could have data-link-mode set to either \"normal\", \"positive\", \"negative\" or \"prevent\", see this.onClick().\n * Toggle could have data-operation set to either \"add\" or \"remove\", see this.toggle().\n * @class\n */\nexport class Toggle {\n    /**\n     * Constructor method.\n     * @param {HTMLElement} node\n     */\n    constructor(node) {\n        /** @type {HTMLElement} */\n        this.node = node;\n\n        /** @type {string} */\n        this.toggleModifier = this.node.dataset.toggleModifier;\n\n        /** @type {(boolean|undefined)} */\n        this.toggleMobileState = this.node.dataset.toggleMobileState ? this.node.dataset.toggleMobileState.toUpperCase() === 'TRUE' : undefined;\n\n        this.restoreState();\n        this.bindEvents();\n    }\n\n    /**\n     * Binds events to callbacks.\n     */\n    bindEvents() {\n        this.node.addEventListener('click', this.onClick.bind(this));\n    }\n\n    /**\n     * Callback for this.node click.\n     *\n     * Prevents default action (e.preventDefault()) based on target and this.node.dataset.toggleLinkMode value:\n     * - \"normal\" (default): Prevent default on regular elements and links towards \"#\", pass all other links.\n     * - \"positive\": Prevent default on regular elements, dont prevent links if this.getState() returns true.\n     * - \"negative\": Prevent default on regular elements, dont prevent links if this.getState() returns false.\n     * - \"prevent\": Always prevent default.\n     *\n     * @param {MouseEvent} e\n     */\n    onClick(e) {\n        let toggleLinkMode = this.node.dataset.toggleLinkMode || 'normal';\n\n        if (toggleLinkMode === 'normal') {\n            if (!e.target.getAttribute('href') || e.target.getAttribute('href') === '#') {\n                e.preventDefault();\n                e.stopPropagation();\n            }\n        } else if (toggleLinkMode === 'positive') {\n            if(!e.target.href || !this.getState()) {\n                e.preventDefault();\n                e.stopPropagation();\n            }\n        } else if (toggleLinkMode === 'negative') {\n            if(!e.target.href || this.getState()) {\n                e.preventDefault();\n                e.stopPropagation();\n            }\n        } else if (toggleLinkMode === 'prevent') {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n\n\n        setTimeout(() => {\n            this.toggle();\n            this.saveState();\n            this.focus();\n        }, 100);\n    }\n\n    /**\n     * Focuses this.node.dataset.focusTarget.\n     */\n    focus() {\n        let querySelector = this.node.dataset.focusTarget;\n        if (querySelector && this.getState()) {\n        let target = document.querySelector(querySelector);\n            target.focus();\n        }\n    }\n\n    /**\n     * Performs toggle.\n     * Toggle behaviour can optionally controlled by this.node.dataset.toggleOperation value.\n     * - undefined (default): Toggles add/remove based on exp or presence of this.toggleModifier\n     * - \"add\": Always add this.toggleModifier to targets.\n     * - \"remove\": Always removes this.toggleModifier from targets.\n     *\n     * @param {boolean} [exp] If passed, add/removes this.toggleModifier based on exp.\n     */\n    toggle(exp = undefined) {\n        if (this.node.dataset.toggleOperation === 'add') {\n            exp = true;\n        } else if (this.node.dataset.toggleOperation === 'remove') {\n            exp = false;\n        }\n\n        let targets = this.getTargets();\n        targets.forEach(target => {\n            BEM.toggleModifier(target, this.toggleModifier, exp);\n            this.dispatchEvent(target);\n        });\n\n        this.getExclusive()\n            .filter(exclusive => targets.indexOf(exclusive) === -1)\n            .forEach(exclusive => BEM.removeModifier(exclusive, this.toggleModifier));\n    }\n\n    /**\n     * Dispatches \"rh-toggle\" event on target.\n     * @param {HTMLElement} target\n     */\n    dispatchEvent(target) {\n        const event = document.createEvent('Event');\n        event.initEvent('rh-toggle', true, true);\n        target.dispatchEvent(event);\n    }\n\n    /**\n     * Returns the toggle state (whether this.node.toggleModifier is applied).\n     * State is retrieved from first target.\n     * @returns {(boolean|null)} Boolean is target is found and state is retrieved, null if no target has been found.\n     */\n    getState() {\n        let referenceTarget = this.getTargets()[0];\n        if (!referenceTarget) {\n            return null;\n        }\n\n        return Boolean(BEM.hasModifier(referenceTarget, this.toggleModifier));\n    }\n\n    /**\n     * Returns all the targets for this.node.\n     * @returns {*}\n     */\n    getTargets() {\n        let selector = this.node.dataset.toggleTarget;\n        return this.getRelated(selector);\n    }\n\n    /**\n     * Returns all the grouped \"exclusive\" toggles of this.node.\n     * @returns {*}\n     */\n    getExclusive() {\n        let selector = this.node.dataset.toggleExclusive || '';\n        return this.getRelated(selector);\n    }\n\n    /**\n     * Splits selector by \",\" and query selects each part.\n     * @param {string} selector Selector(s) (optionally divided by \",\").\n     * @return {Array} An array of all matched nodes.\n     */\n    getRelated(selector) {\n        let targets = [];\n        selector.split(',')\n            .filter(selector => selector.length)\n            .forEach(selector => targets = [...targets, ...document.querySelectorAll(selector)]);\n\n        return targets;\n    }\n\n    /**\n     * Saves state to localstorage.\n     */\n    saveState() {\n        let id = this.node.id;\n        let value = this.getState();\n\n        if (typeof value !== 'boolean') {\n            return;\n        }\n\n        if (id) {\n            let key = `ToggleButton#${id}.modifierApplied`;\n            try {\n                localStorage.setItem(key, value);\n            } catch (e) {\n                console.warn(this, 'Unable to save state to localstorage');\n            }\n        }\n    }\n\n    /**\n     * Restores state from localstorage.\n     */\n    restoreState() {\n        if (this.toggleMobileState !== undefined && matchMedia('(max-width: 767px)').matches) {\n            this.toggle(this.toggleMobileState);\n            return;\n        }\n\n        let id = this.node.id;\n\n        if (id) {\n            let key = `ToggleButton#${id}.modifierApplied`;\n            try {\n                let value = localStorage.getItem(key) || false;\n                this.toggle(value.toUpperCase() === 'TRUE');\n            } catch (e) {\n            }\n        }\n    }\n}\n\n// Start!\n[...TOGGLES].forEach(node => new Toggle(node));\n"],"sourceRoot":""}