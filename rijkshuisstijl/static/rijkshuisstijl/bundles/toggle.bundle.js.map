{"version":3,"sources":["webpack:///./rijkshuisstijl/js/components/toggle/toggle.js"],"names":["Toggle","node","toggleModifier","dataset","toggleMobileState","toUpperCase","undefined","restoreState","bindEvents","addEventListener","onClick","bind","e","toggleLinkMode","target","getAttribute","preventDefault","stopPropagation","href","getState","parentNode","setTimeout","toggle","saveState","focus","querySelector","focusTarget","document","exp","toggleOperation","targets","getTargets","forEach","BEM","dispatchEvent","getExclusive","filter","exclusive","indexOf","removeModifier","event","createEvent","initEvent","referenceTarget","Boolean","hasModifier","selector","toggleTarget","getRelated","toggleExclusive","split","length","querySelectorAll","id","value","key","localStorage","setItem","console","warn","matchMedia","matches","getItem","TOGGLES"],"mappings":"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","file":"toggle.bundle.js","sourcesContent":["import BEM from 'bem.js';\nimport {TOGGLES} from './constants';\n\n\n/**\n * Class for generic toggles.\n *\n * Toggle should have BLOCK_TOGGLE present in classList for detection.\n * Toggle should have data-toggle-target set to query selector for target.\n * Toggle should have data-toggle-modifier set to modifier to toggle.\n * Toggle could have data-focus-target set to query selector for node to focus on click.\n * Toggle could have data-toggle-link-mode set to either \"normal\", \"positive\", \"negative\", \"prevent\" or \"noprevent\", see this.onClick().\n * Toggle could have data-operation set to either \"add\" or \"remove\", see this.toggle().\n * @class\n */\nexport class Toggle {\n    /**\n     * Constructor method.\n     * @param {HTMLElement} node\n     */\n    constructor(node) {\n        /** @type {HTMLElement} */\n        this.node = node;\n\n        /** @type {string} */\n        this.toggleModifier = this.node.dataset.toggleModifier;\n\n        /** @type {(boolean|undefined)} */\n        this.toggleMobileState = this.node.dataset.toggleMobileState ? this.node.dataset.toggleMobileState.toUpperCase() === 'TRUE' : undefined;\n\n        this.restoreState();\n        this.bindEvents();\n    }\n\n    /**\n     * Binds events to callbacks.\n     */\n    bindEvents() {\n        this.node.addEventListener('click', this.onClick.bind(this));\n    }\n\n    /**\n     * Callback for this.node click.\n     *\n     * Prevents default action (e.preventDefault()) based on target and this.node.dataset.toggleLinkMode value:\n     * - \"normal\" (default): Prevent default on regular elements and links towards \"#\", pass all other links.\n     * - \"positive\": Prevent default on regular elements, dont prevent links if this.getState() returns true.\n     * - \"negative\": Prevent default on regular elements, dont prevent links if this.getState() returns false.\n     * - \"prevent\": Always prevent default.\n     * - \"noprevent\": Never prevent default.\n     *\n     * @param {MouseEvent} e\n     */\n    onClick(e) {\n        let toggleLinkMode = this.node.dataset.toggleLinkMode || 'normal';\n\n        if (toggleLinkMode === 'normal') {\n            if (!e.target.getAttribute('href') || e.target.getAttribute('href') === '#') {\n                e.preventDefault();\n                e.stopPropagation();\n            }\n        } else if (toggleLinkMode === 'positive') {\n            if(!e.target.href || !this.getState()) {\n                e.preventDefault();\n                e.stopPropagation();\n            }\n        } else if (toggleLinkMode === 'negative') {\n            if(!e.target.href || this.getState()) {\n                e.preventDefault();\n                e.stopPropagation();\n            }\n        } else if (toggleLinkMode === 'prevent') {\n            e.preventDefault();\n            e.stopPropagation();\n        } else if (toggleLinkMode === 'noprevent') {\n            if(e.target.href || e.target.parentNode.href) {\n                return;\n            }\n        }\n\n\n        setTimeout(() => {\n            this.toggle();\n            this.saveState();\n            this.focus();\n        }, 100);\n    }\n\n    /**\n     * Focuses this.node.dataset.focusTarget.\n     */\n    focus() {\n        let querySelector = this.node.dataset.focusTarget;\n        if (querySelector && this.getState()) {\n        let target = document.querySelector(querySelector);\n            target.focus();\n        }\n    }\n\n    /**\n     * Performs toggle.\n     * Toggle behaviour can optionally controlled by this.node.dataset.toggleOperation value.\n     * - undefined (default): Toggles add/remove based on exp or presence of this.toggleModifier\n     * - \"add\": Always add this.toggleModifier to targets.\n     * - \"remove\": Always removes this.toggleModifier from targets.\n     *\n     * @param {boolean} [exp] If passed, add/removes this.toggleModifier based on exp.\n     */\n    toggle(exp = undefined) {\n        if (this.node.dataset.toggleOperation === 'add') {\n            exp = true;\n        } else if (this.node.dataset.toggleOperation === 'remove') {\n            exp = false;\n        }\n\n        let targets = this.getTargets();\n        targets.forEach(target => {\n            BEM.toggleModifier(target, this.toggleModifier, exp);\n            this.dispatchEvent(target);\n        });\n\n        this.getExclusive()\n            .filter(exclusive => targets.indexOf(exclusive) === -1)\n            .forEach(exclusive => BEM.removeModifier(exclusive, this.toggleModifier));\n    }\n\n    /**\n     * Dispatches \"rh-toggle\" event on target.\n     * @param {HTMLElement} target\n     */\n    dispatchEvent(target) {\n        const event = document.createEvent('Event');\n        event.initEvent('rh-toggle', true, true);\n        target.dispatchEvent(event);\n    }\n\n    /**\n     * Returns the toggle state (whether this.node.toggleModifier is applied).\n     * State is retrieved from first target.\n     * @returns {(boolean|null)} Boolean is target is found and state is retrieved, null if no target has been found.\n     */\n    getState() {\n        let referenceTarget = this.getTargets()[0];\n        if (!referenceTarget) {\n            return null;\n        }\n\n        return Boolean(BEM.hasModifier(referenceTarget, this.toggleModifier));\n    }\n\n    /**\n     * Returns all the targets for this.node.\n     * @returns {*}\n     */\n    getTargets() {\n        let selector = this.node.dataset.toggleTarget;\n        return this.getRelated(selector);\n    }\n\n    /**\n     * Returns all the grouped \"exclusive\" toggles of this.node.\n     * @returns {*}\n     */\n    getExclusive() {\n        let selector = this.node.dataset.toggleExclusive || '';\n        return this.getRelated(selector);\n    }\n\n    /**\n     * Splits selector by \",\" and query selects each part.\n     * @param {string} selector Selector(s) (optionally divided by \",\").\n     * @return {Array} An array of all matched nodes.\n     */\n    getRelated(selector) {\n        let targets = [];\n        selector.split(',')\n            .filter(selector => selector.length)\n            .forEach(selector => targets = [...targets, ...document.querySelectorAll(selector)]);\n\n        return targets;\n    }\n\n    /**\n     * Saves state to localstorage.\n     */\n    saveState() {\n        let id = this.node.id;\n        let value = this.getState();\n\n        if (typeof value !== 'boolean') {\n            return;\n        }\n\n        if (id) {\n            let key = `ToggleButton#${id}.modifierApplied`;\n            try {\n                localStorage.setItem(key, value);\n            } catch (e) {\n                console.warn(this, 'Unable to save state to localstorage');\n            }\n        }\n    }\n\n    /**\n     * Restores state from localstorage.\n     */\n    restoreState() {\n        if (this.toggleMobileState !== undefined && matchMedia('(max-width: 767px)').matches) {\n            this.toggle(this.toggleMobileState);\n            return;\n        }\n\n        let id = this.node.id;\n\n        if (id) {\n            let key = `ToggleButton#${id}.modifierApplied`;\n            try {\n                let value = localStorage.getItem(key) || false;\n                this.toggle(value.toUpperCase() === 'TRUE');\n            } catch (e) {\n            }\n        }\n    }\n}\n\n// Start!\n[...TOGGLES].forEach(node => new Toggle(node));\n"],"sourceRoot":""}