{"version":3,"sources":["webpack:///./rijkshuisstijl/js/components/form/form-control.js"],"names":["FormControl","node","bindEvents","update","querySelectorAll","getInputs","filter","input","name","addEventListener","bind","setTimeout","_update","namedInputs","getNamedInputs","namedInputNames","Set","map","namedInput","length","dataset","inputNames","forEach","datasetItem","value","type","checked","multiple","options","values","option","selected","selectedOption","textContent","checkedInput","e","str","id","console","warn","classList","add","remove","FORM_CONTROLS"],"mappings":"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","file":"form-control.bundle.js","sourcesContent":["import {FORM_CONTROLS} from './constants';\n\n/**\n * Keeps track of inputs and their values and copies those to data attributes of node.\n * @class\n */\nclass FormControl {\n    /**\n     * Constructor method.\n     * @param {HTMLElement} node\n     */\n    constructor(node) {\n        /** @type {HTMLElement} */\n        this.node = node;\n\n        this.bindEvents();\n        this.update();\n    }\n\n    /**\n     * Returns all inputs, selects and textareas within this.node.\n     * @return {HTMLElement[]}\n     */\n    getInputs() {\n        return [...this.node.querySelectorAll('input, select, textarea')];\n    }\n\n    /**\n     * Returns all inputs, selects and textareas within this.node with a name attribute set.\n     * @return {HTMLElement[]}\n     */\n    getNamedInputs() {\n        return this.getInputs()\n            .filter(input => input.name);\n    }\n\n    /**\n     * Binds events to callbacks.\n     */\n    bindEvents() {\n        this.node.addEventListener('change', this.update.bind(this));\n        this.node.addEventListener('input', this.update.bind(this));\n        this.node.addEventListener('click', this.update.bind(this));\n        this.node.addEventListener('touchend', this.update.bind(this));\n        this.node.addEventListener('keyup', this.update.bind(this));\n    }\n\n    /**\n     * Copies inputs select and textreas name and values to data attributes of this.node.\n     */\n    update() {\n        setTimeout(this._update.bind(this));\n    }\n\n    /**\n     * @private\n     */\n    _update() {\n        try {\n            const namedInputs = this.getNamedInputs();\n\n            // Set names (data-input-names=\"foo,bar\").\n            const namedInputNames = [...new Set(namedInputs.map(namedInput => namedInput.name))];\n\n            if (namedInputNames.length) {\n                this.node.dataset.inputNames = namedInputNames;\n            } else {\n                delete this.node.dataset.inputNames;\n            }\n\n\n            // Set values (data-foo-value=\"bar\").\n            namedInputs.forEach(namedInput => {\n                const datasetItem = `${namedInput.name}Value`;\n                let value = namedInput.value;\n\n                // Checkbox\n                if (namedInput.type === 'checkbox' && !namedInput.checked) {\n                    return;\n                }\n\n                // Radio\n                if (namedInput.type === 'radio' && !namedInput.checked) {\n                    return;\n                }\n\n                // Select multiple\n                if (namedInput.multiple && namedInput.options) {\n                    const values = [...namedInput.options]\n                        .filter(option => option.selected)\n                        .map(selectedOption => selectedOption.value || selectedOption.textContent);\n\n                    if (values.length) {\n                        value = values;\n                    } else {\n                        value = false;\n                    }\n                }\n\n                if (value) {\n                    this.node.dataset[datasetItem] = value;\n                } else {\n                    delete this.node.dataset[datasetItem];\n                }\n            });\n\n\n            // Checked\n            namedInputs.filter(namedInput => namedInput.checked && namedInput.value)\n                .forEach(checkedInput => {\n                    const datasetItem = `${checkedInput.name}Value`;\n                    this.node.dataset[datasetItem] = checkedInput.value;\n                });\n        } catch (e) {\n            const str = this.node.dataset.inputNames || this.node.id || this.node;\n            console.warn(`Unable to inspect form control (${str}), got error: ${e}.`);\n        }\n\n        // IE11 Does not trigger a paint when using the generated data attributes in CSS in certain conditions.\n        // We force a repaint by adding and removing an additional class.\n        this.node.classList.add('PAINT');\n        this.node.classList.remove('PAINT');\n    }\n}\n\n\n// Start!\n[...FORM_CONTROLS].forEach(node => new FormControl(node));\n"],"sourceRoot":""}