{"version":3,"sources":["webpack:///./rijkshuisstijl/js/components/paginator/paginator.js"],"names":["Paginator","node","input","BEM","getChildBEMNode","BLOCK_INPUT","bindEvents","addEventListener","onChange","bind","onClick","e","preventDefault","navigate","target","dataset","page","value","window","location","URI","setSearch","name","PAGINATORS","forEach"],"mappings":";;;;;;;;;;;;;;;;;+pDAKA;;;GAIO,GAAMA,UAAb,yBACI;;;OAIA,mBAAYC,IAAZ,CAAkB,iCACd,8BACA,KAAKA,IAAL,CAAYA,IAAZ,CAEA,+BACA,KAAKC,KAAL,CAAaC,6CAAG,CAACC,eAAJ,CAAoB,KAAKH,IAAzB,CAA+BI,sDAA/B,CAAb,CAEA,KAAKC,UAAL,GACH,CAED;;OAfJ,qEAkBiB,CACT,KAAKL,IAAL,CAAUM,gBAAV,CAA2B,QAA3B,CAAqC,KAAKC,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAArC,EACA,KAAKR,IAAL,CAAUM,gBAAV,CAA2B,QAA3B,CAAqC,KAAKC,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAArC,EACA,KAAKR,IAAL,CAAUM,gBAAV,CAA2B,OAA3B,CAAoC,KAAKG,OAAL,CAAaD,IAAb,CAAkB,IAAlB,CAApC,EACH,CAED;;;OAxBJ,0CA4BaE,CA5Bb,CA4BgB,CACRA,CAAC,CAACC,cAAF,GACA,KAAKC,QAAL,GACH,CAED;;;OAjCJ,wCAqCYF,CArCZ,CAqCe,CACPA,CAAC,CAACC,cAAF,GACA,GAAID,CAAC,CAACG,MAAF,CAASC,OAAT,CAAiBC,IAArB,CAA2B,CACvB,KAAKH,QAAL,CAAcF,CAAC,CAACG,MAAF,CAASC,OAAT,CAAiBC,IAA/B,EACH,CACJ,CAED;;OA5CJ,2CA+CsC,IAAzBA,KAAyB,2DAAlB,KAAKd,KAAL,CAAWe,KAAO,CAC9BC,MAAM,CAACC,QAAP,CAAkBC,4CAAG,CAACF,MAAM,CAACC,QAAR,CAAH,CAAqBE,SAArB,CAA+B,KAAKnB,KAAL,CAAWoB,IAA1C,CAAgDN,IAAhD,CAAlB,CACH,CAjDL,yBAqDA;AACA,mBAAIO,qDAAJ,EAAgBC,OAAhB,CAAwB,SAAAvB,IAAI,QAAI,IAAID,UAAJ,CAAcC,IAAd,CAAJ,EAA5B,E","file":"paginator.bundle.js","sourcesContent":["import BEM from 'bem.js';\nimport URI from 'urijs';\nimport {BLOCK_INPUT, PAGINATORS} from './constants';\n\n\n/**\n * Contains logic for making the paginator work with existing GET params.\n * @class\n */\nexport class Paginator {\n    /**\n     * Constructor method.\n     * @param {HTMLFormElement} node\n     */\n    constructor(node) {\n        /** @type {HTMLFormElement} */\n        this.node = node;\n\n        /** @type {HTMLInputElement} */\n        this.input = BEM.getChildBEMNode(this.node, BLOCK_INPUT);\n\n        this.bindEvents();\n    }\n\n    /**\n     * Binds events to callbacks.\n     */\n    bindEvents() {\n        this.node.addEventListener('submit', this.onChange.bind(this));\n        this.node.addEventListener('change', this.onChange.bind(this));\n        this.node.addEventListener('click', this.onClick.bind(this));\n    }\n\n    /**\n     * Callback for change event on this.node.\n     * @param {Event} e\n     */\n    onChange(e) {\n        e.preventDefault();\n        this.navigate();\n    }\n\n    /**\n     * Callback for click event on this.node.\n     * @param {Event} e\n     */\n    onClick(e) {\n        e.preventDefault();\n        if (e.target.dataset.page) {\n            this.navigate(e.target.dataset.page);\n        }\n    }\n\n    /**\n     * Navigate to the page specified in this.input.\n     */\n    navigate(page = this.input.value) {\n        window.location = URI(window.location).setSearch(this.input.name, page);\n    }\n}\n\n\n// Start!\n[...PAGINATORS].forEach(node => new Paginator(node));\n"],"sourceRoot":""}