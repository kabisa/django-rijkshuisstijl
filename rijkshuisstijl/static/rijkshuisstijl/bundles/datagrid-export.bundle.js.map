{"version":3,"sources":["webpack:///./rijkshuisstijl/js/components/datagrid/datagrid-export.js"],"names":["DataGridExportHelper","node","this","bindEvents","addEventListener","update","bind","i","classList","contains","BLOCK_DATAGRID","parentNode","e","dataGrid","getDataGrid","checkboxesInputs","BEM","getChildBEMNodes","ELEMENT_CELL","MODIFIER_CHECKBOX","map","getChildBEMNode","BLOCK_INPUT","find","checked","preventDefault","form","ELEMENT_FORM","MODIFIER_ACTION","BLOCK_SELECT_ALL","forEach","hiddenInput","document","createElement","name","value","type","appendChild","submit","DATAGRID_EXPORTS"],"mappings":"6hCAYA,IAKMA,E,WAKF,WAAYC,I,4FAAO,CAAD,QAEdC,KAAKD,KAAOA,EAEZC,KAAKC,a,4DAOLD,KAAKD,KAAKG,iBAAiB,QAASF,KAAKG,OAAOC,KAAKJ,S,oCAMrD,IAFA,IAAID,EAAOC,KAAKD,KACZM,EAAI,GACAN,EAAKO,UAAUC,SAASC,MAI5B,GAHAH,IACAN,EAAOA,EAAKU,WAERJ,EA/BY,IAgCZ,KAAK,wBAAL,OAhCY,IAgCZ,qDAIR,OAAON,I,6BAOJW,GACH,IAAMC,EAAWX,KAAKY,cAEhBC,EAAmB,EADHC,IAAIC,iBAAiBJ,EAAUH,IAAgBQ,IAAcC,MACvCC,KAAI,SAAAnB,GAAI,OAAIe,IAAIK,gBAAgBpB,EAAMqB,QAIlF,IAH+BP,EAAiBQ,MAAK,SAAAtB,GAAI,OAAIA,EAAKuB,WAGrC,CACzBZ,EAAEa,iBACF,IAAMC,EAAOV,IAAIK,gBAAgBR,EAAUH,IAAgBiB,IAAcC,KACvDZ,IAAIK,gBAAgBR,EAAUgB,KAGtCL,SAAU,EACpBT,EAAiBe,SAAQ,SAAA7B,GACrBA,EAAKuB,SAAU,KAGnB,IAAMO,EAAcC,SAASC,cAAc,SAC3CF,EAAYG,KAAOhC,KAAKD,KAAKiC,KAC7BH,EAAYI,MAAQjC,KAAKD,KAAKkC,MAC9BJ,EAAYK,KAAO,SACnBV,EAAKW,YAAYN,GACjBL,EAAKY,e,gCAOjB,EAAIC,KAAkBT,SAAQ,SAAA7B,GAAI,OAAI,IAAID,EAAqBC","file":"datagrid-export.bundle.js","sourcesContent":["import BEM from 'bem.js';\nimport {\n    BLOCK_DATAGRID,\n    DATAGRID_EXPORTS,\n    ELEMENT_CELL,\n    ELEMENT_FORM,\n    MODIFIER_ACTION,\n    MODIFIER_CHECKBOX\n} from './constants';\nimport {BLOCK_INPUT} from '../form/constants';\nimport {BLOCK_SELECT_ALL} from '../toggle/constants';\n\nconst MAX_ITERATION_COUNT = 100;\n\n/**\n * Makes sure data grid export buttons default to current page selection.\n */\nclass DataGridExportHelper {\n    /**\n     * Constructor method.\n     * @param {HTMLElement} node\n     */\n    constructor(node) {\n        /** @type {HTMLElement} */\n        this.node = node;\n\n        this.bindEvents();\n    }\n\n    /**\n     * Binds events to callbacks.\n     */\n    bindEvents() {\n        this.node.addEventListener('click', this.update.bind(this));\n    }\n\n    getDataGrid() {\n        let node = this.node;\n        let i = 0;\n        while (!node.classList.contains(BLOCK_DATAGRID)) {\n            i++;\n            node = node.parentNode;\n\n            if (i > MAX_ITERATION_COUNT) {\n                throw `MAX_ITERATION_COUNT (${MAX_ITERATION_COUNT}) reached while trying to find data grid element.`;\n            }\n        }\n\n        return node;\n    }\n\n    /**\n     * Checks all checkboxes in the data grid if none has been checked.\n     * @param {MouseEvent} e\n     */\n    update(e) {\n        const dataGrid = this.getDataGrid();\n        const checkboxCells = BEM.getChildBEMNodes(dataGrid, BLOCK_DATAGRID, ELEMENT_CELL, MODIFIER_CHECKBOX);\n        const checkboxesInputs = [...checkboxCells].map(node => BEM.getChildBEMNode(node, BLOCK_INPUT));\n        const selectedCheckboxInputs = checkboxesInputs.find(node => node.checked);\n\n        // Only check checkboxes if none hase been already checked.\n        if (!selectedCheckboxInputs) {\n            e.preventDefault();\n            const form = BEM.getChildBEMNode(dataGrid, BLOCK_DATAGRID, ELEMENT_FORM, MODIFIER_ACTION);\n            const selectAll = BEM.getChildBEMNode(dataGrid, BLOCK_SELECT_ALL);\n\n            // Select all checkboxes, including the \"select all\" toggle.\n            selectAll.checked = true;\n            checkboxesInputs.forEach(node => {\n                node.checked = true;\n            });\n\n            const hiddenInput = document.createElement(\"input\");\n            hiddenInput.name = this.node.name;\n            hiddenInput.value = this.node.value;\n            hiddenInput.type = \"hidden\";\n            form.appendChild(hiddenInput);\n            form.submit();\n        }\n    }\n}\n\n\n// Start!\n[...DATAGRID_EXPORTS].forEach(node => new DataGridExportHelper(node));\n"],"sourceRoot":""}