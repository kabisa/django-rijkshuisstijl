{"version":3,"sources":["webpack:///./rijkshuisstijl/js/components/summary/summary.js"],"names":["MAX_ITERATION_COUNT","SummaryEdit","node","validatables","querySelectorAll","bindEvents","forEach","addEventListener","update","bind","i","className","BEM","getBEMClassName","BLOCK_SUMMARY","ELEMENT_KEY_VALUE","classList","contains","parentNode","toggle","getKeyValue","addModifier","MODIFIER_EDIT","focus","scrollIntoView","SUMMARIES"],"mappings":";;;;;;;;;;;;;;+pDAIA,sDACA,GAAMA,oBAAmB,CAAG,EAA5B,CAGA;;;MAIMC,Y,yBACF;;;OAIA,qBAAYC,IAAZ,CAAkB,mCACd,0BACA,KAAKA,IAAL,CAAYA,IAAZ,CAEA,+DACA,KAAKC,YAAL,CAAoB,KAAKD,IAAL,CAAUE,gBAAV,CAA2B,kBAA3B,CAApB,CAEA,KAAKC,UAAL,GACH,CAED;;8EAGa,gBACT,mBAAI,KAAKF,YAAT,EAAuBG,OAAvB,CAA+B,SAAAJ,IAAI,QAAIA,KAAI,CAACK,gBAAL,CAAsB,SAAtB,CAAiC,KAAI,CAACC,MAAL,CAAYC,IAAZ,CAAiB,KAAjB,CAAuBP,IAAvB,CAAjC,CAAJ,EAAnC,EACH,CAED;;;;uDAKYA,I,CAAM,CACd,GAAIQ,EAAC,CAAG,CAAR,CACA,GAAMC,UAAS,CAAGC,6CAAG,CAACC,eAAJ,CAAoBC,wDAApB,CAAmCC,4DAAnC,CAAlB,CACA,MAAO,CAACb,IAAI,CAACc,SAAL,CAAeC,QAAf,CAAwBN,SAAxB,CAAR,CAA4C,CACxCD,CAAC,GACDR,IAAI,CAAGA,IAAI,CAACgB,UAAZ,CAEA,GAAIR,CAAC,CAAGV,mBAAR,CAA6B,CACzB,oCAA8BA,mBAA9B,sDACH,CACJ,CAED,MAAOE,KAAP,CACH,CAED;;;6CAIOA,I,CAAM,CACT,GAAMiB,OAAM,CAAG,KAAKC,WAAL,CAAiBlB,IAAjB,CAAf,CACAU,6CAAG,CAACS,WAAJ,CAAgBF,MAAhB,CAAwBG,wDAAxB,EACApB,IAAI,CAACqB,KAAL,GACArB,IAAI,CAACsB,cAAL,GACH,C,2BAIL;AACA,mBAAIC,oDAAJ,EAAenB,OAAf,CAAuB,SAAAJ,IAAI,QAAI,IAAID,YAAJ,CAAgBC,IAAhB,CAAJ,EAA3B,E","file":"summary.bundle.js","sourcesContent":["import BEM from 'bem.js';\nimport {SUMMARIES, BLOCK_SUMMARY, ELEMENT_KEY_VALUE, MODIFIER_EDIT} from './constants';\n\n\n/** @const {number} getKeyValue() while loop limit. */\nconst MAX_ITERATION_COUNT = 10;\n\n\n/**\n * Controls auto toggle inputs if not valid.\n * @class\n */\nclass SummaryEdit {\n    /**\n     * Constructor method.\n     * @param {HTMLElement} node\n     */\n    constructor(node) {\n        /** @type {HTMLElement} */\n        this.node = node;\n\n        /** @type {NodeList} Children of node that can be validated. */\n        this.validatables = this.node.querySelectorAll(':invalid, :valid');\n\n        this.bindEvents();\n    }\n\n    /**\n     * Binds events to callbacks.\n     */\n    bindEvents() {\n        [...this.validatables].forEach(node => node.addEventListener('invalid', this.update.bind(this, node)));\n    }\n\n    /**\n     * Finds the key value element associated with node.\n     * @param {HTMLElement} node\n     * @return {HTMLElement}\n     */\n    getKeyValue(node) {\n        let i = 0;\n        const className = BEM.getBEMClassName(BLOCK_SUMMARY, ELEMENT_KEY_VALUE);\n        while (!node.classList.contains(className)) {\n            i++;\n            node = node.parentNode;\n\n            if (i > MAX_ITERATION_COUNT) {\n                throw `MAX_ITERATION_COUNT (${MAX_ITERATION_COUNT}) reached while trying to find key value element.`;\n            }\n        }\n\n        return node;\n    }\n\n    /**\n     * Makes sure node is visible if not valid.\n     * @param {HTMLElement} node\n     */\n    update(node) {\n        const toggle = this.getKeyValue(node);\n        BEM.addModifier(toggle, MODIFIER_EDIT);\n        node.focus();\n        node.scrollIntoView();\n    }\n\n}\n\n// Start!\n[...SUMMARIES].forEach(node => new SummaryEdit(node));\n"],"sourceRoot":""}